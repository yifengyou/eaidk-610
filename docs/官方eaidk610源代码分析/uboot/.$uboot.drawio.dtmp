<mxfile host="Electron" modified="2023-08-19T15:02:00.064Z" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/21.4.0 Chrome/112.0.5615.204 Electron/24.5.1 Safari/537.36" etag="nSUlZdTvvpWmcNUUSCfj" version="21.4.0" type="device">
  <diagram name="第 1 页" id="mk2pto_QyWCDaYZsWFHj">
    <mxGraphModel dx="5695" dy="904" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="V25Vb6sHej4eBr_n-rl1-1" value="void rockchip_show_bmp(const char *bmp) {&#xa;    struct display_state *s;&#xa;&#xa;&#xa;    printf(&quot;[YYF] %s:%s:%d\n&quot;, __FILE__, __func__, __LINE__);&#xa;    if (!bmp) {&#xa;        list_for_each_entry(s, &amp;rockchip_display_list, head)&#xa;        display_disable(s);&#xa;        return;&#xa;    }&#xa;    list_for_each_entry(s, &amp;rockchip_display_list, head)&#xa;    {&#xa;        s-&gt;logo.mode = s-&gt;charge_logo_mode;&#xa;        if (load_bmp_logo(&amp;s-&gt;logo, bmp))&#xa;            continue;&#xa;        display_logo(s);&#xa;    }&#xa;}" style="text;whiteSpace=wrap;strokeColor=default;" parent="1" vertex="1">
          <mxGeometry x="20" y="40" width="370" height="280" as="geometry" />
        </mxCell>
        <mxCell id="V25Vb6sHej4eBr_n-rl1-2" value="static int load_bmp_logo(struct logo_info *logo, const char *bmp_name) {&#xa;    struct rockchip_logo_cache *logo_cache;&#xa;    struct bmp_header *header;&#xa;    void *dst = NULL, *pdst;&#xa;    int size;&#xa;&#xa;&#xa;    printf(&quot;[YYF] %s:%s:%d (load bmp %s)\n&quot;, __FILE__, __func__, __LINE__, bmp_name);&#xa;&#xa;&#xa;    if (!logo || !bmp_name)&#xa;        return -EINVAL;&#xa;    logo_cache = find_or_alloc_logo_cache(bmp_name);&#xa;    if (!logo_cache)&#xa;        return -ENOMEM;&#xa;&#xa;&#xa;    if (logo_cache-&gt;logo.mem) {&#xa;        memcpy(logo, &amp;logo_cache-&gt;logo, sizeof(*logo));&#xa;        return 0;&#xa;    }&#xa;&#xa;&#xa;    header = get_bmp_header(bmp_name);&#xa;    if (!header)&#xa;        return -EINVAL;&#xa;&#xa;&#xa;    logo-&gt;bpp = get_unaligned_le16(&amp;header-&gt;bit_count);&#xa;    logo-&gt;width = get_unaligned_le32(&amp;header-&gt;width);&#xa;    logo-&gt;height = get_unaligned_le32(&amp;header-&gt;height);&#xa;    size = get_unaligned_le32(&amp;header-&gt;file_size);&#xa;    if (!can_direct_logo(logo-&gt;bpp)) {&#xa;        if (size &gt; CONFIG_RK_BOOT_BUFFER_SIZE) {&#xa;            printf(&quot;failed to use boot buf as temp bmp buffer\n&quot;);&#xa;            return -ENOMEM;&#xa;        }&#xa;        pdst = (void *) gd-&gt;arch.rk_boot_buf_addr;&#xa;&#xa;&#xa;    } else {&#xa;        pdst = get_display_buffer(size);&#xa;        dst = pdst;&#xa;    }&#xa;&#xa;&#xa;    if (load_bmp_content(bmp_name, pdst, size)) {&#xa;        printf(&quot;failed to load bmp %s\n&quot;, bmp_name);&#xa;        return 0;&#xa;    }&#xa;&#xa;&#xa;    if (!can_direct_logo(logo-&gt;bpp)) {&#xa;        int dst_size;&#xa;        /*&#xa;         * TODO: force use 16bpp if bpp less than 16;&#xa;         */&#xa;        logo-&gt;bpp = (logo-&gt;bpp &lt;= 16) ? 16 : logo-&gt;bpp;&#xa;        dst_size = logo-&gt;width * logo-&gt;height * logo-&gt;bpp &gt;&gt; 3;&#xa;&#xa;&#xa;        dst = get_display_buffer(dst_size);&#xa;        if (!dst)&#xa;            return -ENOMEM;&#xa;        if (bmpdecoder(pdst, dst, logo-&gt;bpp)) {&#xa;            printf(&quot;failed to decode bmp %s\n&quot;, bmp_name);&#xa;            return 0;&#xa;        }&#xa;        logo-&gt;offset = 0;&#xa;        logo-&gt;ymirror = 0;&#xa;    } else {&#xa;        logo-&gt;offset = get_unaligned_le32(&amp;header-&gt;data_offset);&#xa;        logo-&gt;ymirror = 1;&#xa;    }&#xa;    logo-&gt;mem = (u32)(&#xa;    unsigned long)dst;&#xa;&#xa;&#xa;    memcpy(&amp;logo_cache-&gt;logo, logo, sizeof(*logo));&#xa;&#xa;&#xa;    return 0;&#xa;}" style="text;whiteSpace=wrap;strokeColor=default;" parent="1" vertex="1">
          <mxGeometry x="20" y="370" width="520" height="1220" as="geometry" />
        </mxCell>
        <mxCell id="V25Vb6sHej4eBr_n-rl1-3" value="&lt;pre style=&quot;background-color:#ffffff;color:#000000;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:9.8pt;&quot;&gt;&lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;static int &lt;/span&gt;display_logo(&lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;struct &lt;/span&gt;&lt;span style=&quot;color:#008080;&quot;&gt;display_state &lt;/span&gt;*state) {&lt;br&gt;    &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;struct &lt;/span&gt;&lt;span style=&quot;color:#008080;&quot;&gt;crtc_state &lt;/span&gt;*crtc_state = &amp;amp;state-&amp;gt;crtc_state;&lt;br&gt;    &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;struct &lt;/span&gt;&lt;span style=&quot;color:#008080;&quot;&gt;connector_state &lt;/span&gt;*conn_state = &amp;amp;state-&amp;gt;conn_state;&lt;br&gt;    &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;struct &lt;/span&gt;&lt;span style=&quot;color:#008080;&quot;&gt;logo_info &lt;/span&gt;*logo = &amp;amp;state-&amp;gt;logo;&lt;br&gt;    &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;int &lt;/span&gt;hdisplay, vdisplay;&lt;br&gt;&lt;br&gt;    display_init(state);&lt;br&gt;    &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;if &lt;/span&gt;(!state-&amp;gt;is_init)&lt;br&gt;        &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;return &lt;/span&gt;-ENODEV;&lt;br&gt;&lt;br&gt;    &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;switch &lt;/span&gt;(logo-&amp;gt;bpp) {&lt;br&gt;        &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;case &lt;/span&gt;&lt;span style=&quot;color:#0000ff;&quot;&gt;16&lt;/span&gt;:&lt;br&gt;            crtc_state-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;format &lt;/span&gt;= &lt;span style=&quot;color:#660e7a;font-weight:bold;font-style:italic;&quot;&gt;ROCKCHIP_FMT_RGB565&lt;/span&gt;;&lt;br&gt;            &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;break&lt;/span&gt;;&lt;br&gt;        &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;case &lt;/span&gt;&lt;span style=&quot;color:#0000ff;&quot;&gt;24&lt;/span&gt;:&lt;br&gt;            crtc_state-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;format &lt;/span&gt;= &lt;span style=&quot;color:#660e7a;font-weight:bold;font-style:italic;&quot;&gt;ROCKCHIP_FMT_RGB888&lt;/span&gt;;&lt;br&gt;            &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;break&lt;/span&gt;;&lt;br&gt;        &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;case &lt;/span&gt;&lt;span style=&quot;color:#0000ff;&quot;&gt;32&lt;/span&gt;:&lt;br&gt;            crtc_state-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;format &lt;/span&gt;= &lt;span style=&quot;color:#660e7a;font-weight:bold;font-style:italic;&quot;&gt;ROCKCHIP_FMT_ARGB8888&lt;/span&gt;;&lt;br&gt;            &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;break&lt;/span&gt;;&lt;br&gt;        &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;default&lt;/span&gt;:&lt;br&gt;            printf(&lt;span style=&quot;color:#008000;font-weight:bold;&quot;&gt;&quot;can&#39;t support bmp bits[%d]&lt;/span&gt;&lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color:#008000;font-weight:bold;&quot;&gt;&quot;&lt;/span&gt;, logo-&amp;gt;bpp);&lt;br&gt;            &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;return &lt;/span&gt;-EINVAL;&lt;br&gt;    }&lt;br&gt;    crtc_state-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;rb_swap &lt;/span&gt;= logo-&amp;gt;bpp != &lt;span style=&quot;color:#0000ff;&quot;&gt;32&lt;/span&gt;;&lt;br&gt;    hdisplay = conn_state-&amp;gt;mode.hdisplay;&lt;br&gt;    vdisplay = conn_state-&amp;gt;mode.vdisplay;&lt;br&gt;    crtc_state-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;src_w &lt;/span&gt;= logo-&amp;gt;width;&lt;br&gt;    crtc_state-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;src_h &lt;/span&gt;= logo-&amp;gt;height;&lt;br&gt;    crtc_state-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;src_x &lt;/span&gt;= &lt;span style=&quot;color:#0000ff;&quot;&gt;0&lt;/span&gt;;&lt;br&gt;    crtc_state-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;src_y &lt;/span&gt;= &lt;span style=&quot;color:#0000ff;&quot;&gt;0&lt;/span&gt;;&lt;br&gt;    crtc_state-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;ymirror &lt;/span&gt;= logo-&amp;gt;ymirror;&lt;br&gt;&lt;br&gt;    crtc_state-&amp;gt;dma_addr = logo-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;mem &lt;/span&gt;+ logo-&amp;gt;offset;&lt;br&gt;    crtc_state-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;xvir &lt;/span&gt;= ALIGN(crtc_state-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;src_w &lt;/span&gt;* logo-&amp;gt;bpp, &lt;span style=&quot;color:#0000ff;&quot;&gt;32&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span style=&quot;color:#0000ff;&quot;&gt;5&lt;/span&gt;;&lt;br&gt;&lt;br&gt;    &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;if &lt;/span&gt;(logo-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;mode &lt;/span&gt;== &lt;span style=&quot;color:#660e7a;font-weight:bold;font-style:italic;&quot;&gt;ROCKCHIP_DISPLAY_FULLSCREEN&lt;/span&gt;) {&lt;br&gt;        crtc_state-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;crtc_x &lt;/span&gt;= &lt;span style=&quot;color:#0000ff;&quot;&gt;0&lt;/span&gt;;&lt;br&gt;        crtc_state-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;crtc_y &lt;/span&gt;= &lt;span style=&quot;color:#0000ff;&quot;&gt;0&lt;/span&gt;;&lt;br&gt;        crtc_state-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;crtc_w &lt;/span&gt;= hdisplay;&lt;br&gt;        crtc_state-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;crtc_h &lt;/span&gt;= vdisplay;&lt;br&gt;    } &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;else &lt;/span&gt;{&lt;br&gt;        &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;if &lt;/span&gt;(crtc_state-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;src_w &lt;/span&gt;&amp;gt;= hdisplay) {&lt;br&gt;            crtc_state-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;crtc_x &lt;/span&gt;= &lt;span style=&quot;color:#0000ff;&quot;&gt;0&lt;/span&gt;;&lt;br&gt;            crtc_state-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;crtc_w &lt;/span&gt;= hdisplay;&lt;br&gt;        } &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;else &lt;/span&gt;{&lt;br&gt;            crtc_state-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;crtc_x &lt;/span&gt;= (hdisplay - crtc_state-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;src_w&lt;/span&gt;) / &lt;span style=&quot;color:#0000ff;&quot;&gt;2&lt;/span&gt;;&lt;br&gt;            crtc_state-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;crtc_w &lt;/span&gt;= crtc_state-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;src_w&lt;/span&gt;;&lt;br&gt;        }&lt;br&gt;&lt;br&gt;        &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;if &lt;/span&gt;(crtc_state-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;src_h &lt;/span&gt;&amp;gt;= vdisplay) {&lt;br&gt;            crtc_state-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;crtc_y &lt;/span&gt;= &lt;span style=&quot;color:#0000ff;&quot;&gt;0&lt;/span&gt;;&lt;br&gt;            crtc_state-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;crtc_h &lt;/span&gt;= vdisplay;&lt;br&gt;        } &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;else &lt;/span&gt;{&lt;br&gt;            crtc_state-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;crtc_y &lt;/span&gt;= (vdisplay - crtc_state-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;src_h&lt;/span&gt;) / &lt;span style=&quot;color:#0000ff;&quot;&gt;2&lt;/span&gt;;&lt;br&gt;            crtc_state-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;crtc_h &lt;/span&gt;= crtc_state-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;src_h&lt;/span&gt;;&lt;br&gt;        }&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    display_set_plane(state);&lt;br&gt;    &lt;span style=&quot;color:#0c8a03;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color:#0c8a03;font-family:&#39;宋体&#39;,monospace;&quot;&gt;使能显示&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#0c8a03;font-family:&#39;宋体&#39;,monospace;&quot;&gt;    &lt;/span&gt;display_enable(state);&lt;br&gt;&lt;br&gt;    &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;return &lt;/span&gt;&lt;span style=&quot;color:#0000ff;&quot;&gt;0&lt;/span&gt;;&lt;br&gt;}&lt;/pre&gt;" style="text;whiteSpace=wrap;html=1;strokeColor=default;" parent="1" vertex="1">
          <mxGeometry x="590" y="370" width="520" height="1070" as="geometry" />
        </mxCell>
        <mxCell id="0WyC1pZd4Z-Y41jPhD3N-1" value="&lt;pre style=&quot;color: rgb(0, 0, 0); font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 9.8pt;&quot;&gt;int32 GetParam(uint32 param_addr, &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;void &lt;/span&gt;*buf)&lt;br&gt;{&lt;br&gt;   &lt;span style=&quot;color:#371f80;&quot;&gt;PLoaderParam &lt;/span&gt;param = (&lt;span style=&quot;color:#371f80;&quot;&gt;PLoaderParam&lt;/span&gt;)buf;&lt;br&gt;   &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;int &lt;/span&gt;read_sec = MAX_LOADER_PARAM &amp;gt;&amp;gt; &lt;span style=&quot;color:#0000ff;&quot;&gt;9&lt;/span&gt;;&lt;br&gt;   &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;int &lt;/span&gt;i = &lt;span style=&quot;color:#0000ff;&quot;&gt;0&lt;/span&gt;;&lt;br&gt;&lt;br&gt;   printf(&lt;span style=&quot;color:#008000;font-weight:bold;&quot;&gt;&quot;GetParam&lt;/span&gt;&lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color:#008000;font-weight:bold;&quot;&gt;&quot;&lt;/span&gt;);&lt;br&gt;&lt;br&gt;   &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;for &lt;/span&gt;(i = &lt;span style=&quot;color:#0000ff;&quot;&gt;0&lt;/span&gt;; i &amp;lt; PARAMETER_NUM; i++) {&lt;br&gt;      &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;if &lt;/span&gt;(StorageReadLba(param_addr + i * PARAMETER_OFFSET, buf, read_sec) == &lt;span style=&quot;color:#0000ff;&quot;&gt;0&lt;/span&gt;) {&lt;br&gt;         &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;if &lt;/span&gt;(CheckParam(param) == &lt;span style=&quot;color:#0000ff;&quot;&gt;0&lt;/span&gt;) {&lt;br&gt;            debug(&lt;span style=&quot;color:#008000;font-weight:bold;&quot;&gt;&quot;check parameter success&lt;/span&gt;&lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color:#008000;font-weight:bold;&quot;&gt;&quot;&lt;/span&gt;);&lt;br&gt;            &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;return &lt;/span&gt;&lt;span style=&quot;color:#0000ff;&quot;&gt;0&lt;/span&gt;;&lt;br&gt;         } &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;else &lt;/span&gt;{&lt;br&gt;            printf(&lt;span style=&quot;color:#008000;font-weight:bold;&quot;&gt;&quot;Invalid parameter&lt;/span&gt;&lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color:#008000;font-weight:bold;&quot;&gt;&quot;&lt;/span&gt;);&lt;br&gt;            &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;return &lt;/span&gt;-&lt;span style=&quot;color:#0000ff;&quot;&gt;1&lt;/span&gt;;&lt;br&gt;         }&lt;br&gt;      } &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;else &lt;/span&gt;{&lt;br&gt;         printf(&lt;span style=&quot;color:#008000;font-weight:bold;&quot;&gt;&quot;read parameter fail&lt;/span&gt;&lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color:#008000;font-weight:bold;&quot;&gt;&quot;&lt;/span&gt;);&lt;br&gt;         &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;return &lt;/span&gt;-&lt;span style=&quot;color:#0000ff;&quot;&gt;2&lt;/span&gt;;&lt;br&gt;      }&lt;br&gt;   }&lt;br&gt;&lt;br&gt;   &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;return &lt;/span&gt;-&lt;span style=&quot;color:#0000ff;&quot;&gt;3&lt;/span&gt;;&lt;br&gt;}&lt;/pre&gt;" style="text;whiteSpace=wrap;html=1;strokeColor=#d6b656;fillColor=#fff2cc;labelBackgroundColor=none;" vertex="1" parent="1">
          <mxGeometry x="-3340" y="130" width="560" height="440" as="geometry" />
        </mxCell>
        <mxCell id="0WyC1pZd4Z-Y41jPhD3N-3" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="0WyC1pZd4Z-Y41jPhD3N-2" target="0WyC1pZd4Z-Y41jPhD3N-1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="0WyC1pZd4Z-Y41jPhD3N-2" value="&lt;pre style=&quot;color: rgb(0, 0, 0); font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 9.8pt;&quot;&gt;&lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;int &lt;/span&gt;load_disk_partitions(&lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;void&lt;/span&gt;)&lt;br&gt;{&lt;br&gt;   &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;int &lt;/span&gt;i = &lt;span style=&quot;color:#0000ff;&quot;&gt;0&lt;/span&gt;;&lt;br&gt;   &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;int &lt;/span&gt;ret = -&lt;span style=&quot;color:#0000ff;&quot;&gt;1&lt;/span&gt;;&lt;br&gt;   &lt;span style=&quot;color:#371f80;&quot;&gt;cmdline_mtd_partition &lt;/span&gt;*cmd_mtd;&lt;br&gt;   &lt;span style=&quot;color:#371f80;&quot;&gt;PLoaderParam &lt;/span&gt;param;&lt;br&gt;&lt;span style=&quot;color:#808000;&quot;&gt;#ifdef &lt;/span&gt;CONFIG_RK_NVME_BOOT_EN&lt;br&gt;   param = (PLoaderParam)memalign(SZ_4K, MAX_LOADER_PARAM * PARAMETER_NUM);&lt;br&gt;&lt;span style=&quot;color:#808000;&quot;&gt;#else&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808000;&quot;&gt;   &lt;/span&gt;param = (PLoaderParam)memalign(ARCH_DMA_MINALIGN, MAX_LOADER_PARAM * PARAMETER_NUM);&lt;br&gt;&lt;span style=&quot;color:#808000;&quot;&gt;#endif&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808000;&quot;&gt;   &lt;/span&gt;&lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;if &lt;/span&gt;(!GetParam(&lt;span style=&quot;color:#0000ff;&quot;&gt;0&lt;/span&gt;, param)) {&lt;br&gt;      ParseParam(&amp;amp;gBootInfo, param-&amp;gt;parameter, param-&amp;gt;length);&lt;br&gt;      cmd_mtd = &amp;amp;(gBootInfo.cmd_mtd);&lt;br&gt;      &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;for&lt;/span&gt;(i = &lt;span style=&quot;color:#0000ff;&quot;&gt;0&lt;/span&gt;; i &amp;lt; cmd_mtd-&amp;gt;&lt;span style=&quot;color:#660e7a;&quot;&gt;num_parts&lt;/span&gt;; i++) {&lt;br&gt;         &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;if &lt;/span&gt;(i &amp;gt;= CONFIG_MAX_PARTITIONS) {&lt;br&gt;            printf(&lt;span style=&quot;color:#008000;font-weight:bold;&quot;&gt;&quot;Failed! Too much partition: %d(%d)&lt;/span&gt;&lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color:#008000;font-weight:bold;&quot;&gt;&quot;&lt;/span&gt;,&lt;br&gt;                  cmd_mtd-&amp;gt;num_parts, CONFIG_MAX_PARTITIONS);&lt;br&gt;            &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;goto &lt;/span&gt;end;&lt;br&gt;         }&lt;br&gt;         debug(&lt;span style=&quot;color:#008000;font-weight:bold;&quot;&gt;&quot;partition(%s): offset=0x%08lX, size=0x%08lX&lt;/span&gt;&lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color:#008000;font-weight:bold;&quot;&gt;&quot;&lt;/span&gt;, \&lt;br&gt;               cmd_mtd-&amp;gt;parts[i].name, cmd_mtd-&amp;gt;parts[i].start, \&lt;br&gt;               cmd_mtd-&amp;gt;parts[i].size);&lt;br&gt;      }&lt;br&gt;      ret = &lt;span style=&quot;color:#0000ff;&quot;&gt;0&lt;/span&gt;;&lt;br&gt;   }&lt;br&gt;end:&lt;br&gt;   &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;if &lt;/span&gt;(param)&lt;br&gt;      free(param);&lt;br&gt;&lt;br&gt;   &lt;span style=&quot;color:#000080;font-weight:bold;&quot;&gt;return &lt;/span&gt;ret;&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;" style="text;whiteSpace=wrap;html=1;fillColor=#ffe6cc;strokeColor=#d79b00;labelBackgroundColor=none;" vertex="1" parent="1">
          <mxGeometry x="-4090" y="20" width="640" height="550" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
